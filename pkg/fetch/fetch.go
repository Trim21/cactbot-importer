package fetch

import (
	"bytes"
	"fmt"
	"net/url"
	"strconv"
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/pkg/errors"

	"cactbot_importer/pkg/http"
	"cactbot_importer/pkg/repo"
	"cactbot_importer/pkg/wrap"
)

var ErrNotValidUrl = errors.New("不是有效的HTTP网址")

func Fetch(urls []string) (string, error) {
	w := bytes.NewBuffer(nil)
	ref := make(map[*url.URL]*url.URL)
	added := make(map[*url.URL]struct{})
	processedUrls := make([]*url.URL, 0, len(urls))

	w.WriteString("// generated by https://cactbot-importer.trim21.cn/\n")
	w.WriteString("// included files:\n//\n")

	add := func(url *url.URL, msg string) bool {
		if _, ok := added[url]; ok {
			w.WriteString(msg + url.String() + " [skipped]\n")
			return false
		} else {
			w.WriteString(msg + url.String() + "\n")
			added[url] = struct{}{}
			processedUrls = append(processedUrls, url)
			return true
		}
	}

	for _, u := range urls {
		uu, err := url.Parse(u)
		if err != nil {
			return "", errors.Wrapf(err, strconv.Quote(u))
		}
		if uu.Scheme != "http" && uu.Scheme != "https" && uu.Host == "" {
			return "", errors.Wrapf(ErrNotValidUrl, strconv.Quote(u))
		}

		u = strings.TrimSpace(u)
		if strings.HasSuffix(uu.Path, ".json") {
			w.WriteString("// " + u + "\n")

			urls, err := repo.Fetch(u)
			if err != nil {
				if errors.Is(err, repo.ErrNestedRepo) {
					return "", wrap.Rewrite(err, fmt.Sprintf("不能嵌套repo %s", u))
				}
				return "", err
			}

			for _, ur := range urls {
				if add(ur, "//   ") {
					ref[ur] = uu
				}
			}
			w.WriteString("//\n")
		} else {
			add(uu, "// ")
		}
	}

	w.WriteString("\n")

	err := joinURLs(w, processedUrls, ref)

	return w.String(), err
}

func joinURLs(w *bytes.Buffer, urls []*url.URL, ref map[*url.URL]*url.URL) error {
	for _, u := range urls {
		u.RawQuery = ""
		striped := &url.URL{
			Scheme: u.Scheme,
			Host:   u.Host,
			Path:   u.Path,
		}

		resp, err := http.Get(striped)
		if err != nil {
			return fiber.NewError(fiber.StatusBadGateway, "无法获取链接 "+strconv.Quote(striped.String()))
		}
		if resp.StatusCode() >= 300 {
			if v, found := ref[u]; found {
				return fmt.Errorf("无法获取合集 %s\n\n文件 %s 消失", v, u.String())
			}
			return fmt.Errorf("无法获取文件 %s", u.String())
		}

		t, err := process(resp)
		if err != nil {
			if errors.Is(err, ErrTransform) {
				return wrap.Rewrite(err, t)
			}
			return err
		}
		w.WriteString("// start " + striped.String() + "\n")
		w.WriteString("console.log('cactbot importer: [INFO] executing script from " + striped.String() + "');\n")
		w.WriteString(t)
		w.WriteString("// end " + striped.String() + "\n\n")
	}

	return nil
}
